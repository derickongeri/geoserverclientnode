import { Geometry, Feature, FeatureCollection, GeoJSON, GeoJsonProperties } from 'geojson';

/**
 * Converts GeoJSON Geometry to WKT
 *
 * @export
 * @param  {Geometry} geojson Geometry object to convert
 * @return {string} The GeoJSON converted to well known text representation
 */
declare function convertGeometryToWK(geojson: Geometry): string;
/**
 * Converts GeoJSON Feature to WKT
 *
 * @export
 * @param  {Feature} geojson Feature object to convert
 * @return {string} The GeoJSON converted to well known text representation
 */
declare function convertFeatureToWK(geojson: Feature): string;
/**
 * Converts a GeoJSON FeatureCollection to WKT GeometryCollection
 * @export
 * @param  {FeatureCollection} featureCollection The FeatureCollection to convert to WKT
 * @return {string} The GeoJSON converted to well known representation
 */
declare function convertFeatureCollection(featureCollection: FeatureCollection): string;
/**
 * Shorthand to convert GeoJSON Features, Geometries or FeatureCollections to WKT or WKB
 *
 * @export
 * @param  {GeoJSON} geojson The GeoJSON to convert
 * @return {string} The GeoJSON as WKT
 */
declare function convertToWK(geojson: GeoJSON): string;
/**
 * Parse a WKT or WKB into a GeoJSON Feature or Geometry
 *
 * @export
 * @param  {string} item The WKT to convert to GeoJSON
 * @param  {boolean} [asFeature=false] Wrap the converted geometry into a Feature
 * @param  {GeoJsonProperties} [properties={}] Metadata to embed the Feature with
 * @return {(Feature | Geometry)} The WKT as GeoJSON
 */
declare function parseFromWK(item: string, asFeature?: boolean, properties?: GeoJsonProperties): Feature | Geometry;

export { convertFeatureCollection, convertFeatureToWK, convertGeometryToWK, convertToWK, parseFromWK };
