// src/index.ts
import { parse, stringify } from "wellknown";
function convertGeometryToWK(geojson) {
  return stringify(geojson);
}
function convertFeatureToWK(geojson) {
  return convertGeometryToWK(geojson.geometry);
}
function convertFeatureCollection(featureCollection) {
  if (featureCollection.type !== "FeatureCollection") {
    throw new Error("GeoJSON is not a FeatureCollection");
  }
  return `GEOMETRYCOLLECTION(${featureCollection.features.map((d) => convertFeatureToWK(d)).join(",")})`;
}
function convertToWK(geojson) {
  switch (geojson.type) {
    case "Feature":
      return convertFeatureToWK(geojson);
    case "FeatureCollection":
      return convertFeatureCollection(geojson);
    default:
      return convertGeometryToWK(geojson);
  }
}
function parseFromWK(item, asFeature = false, properties = {}) {
  const parsed = parse(item);
  if (asFeature) {
    return {
      type: "Feature",
      geometry: parsed,
      properties
    };
  }
  return parsed;
}
export {
  convertFeatureCollection,
  convertFeatureToWK,
  convertGeometryToWK,
  convertToWK,
  parseFromWK
};
