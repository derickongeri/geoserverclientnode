"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  convertFeatureCollection: () => convertFeatureCollection,
  convertFeatureToWK: () => convertFeatureToWK,
  convertGeometryToWK: () => convertGeometryToWK,
  convertToWK: () => convertToWK,
  parseFromWK: () => parseFromWK
});
module.exports = __toCommonJS(src_exports);
var import_wellknown = require("wellknown");
function convertGeometryToWK(geojson) {
  return (0, import_wellknown.stringify)(geojson);
}
function convertFeatureToWK(geojson) {
  return convertGeometryToWK(geojson.geometry);
}
function convertFeatureCollection(featureCollection) {
  if (featureCollection.type !== "FeatureCollection") {
    throw new Error("GeoJSON is not a FeatureCollection");
  }
  return `GEOMETRYCOLLECTION(${featureCollection.features.map((d) => convertFeatureToWK(d)).join(",")})`;
}
function convertToWK(geojson) {
  switch (geojson.type) {
    case "Feature":
      return convertFeatureToWK(geojson);
    case "FeatureCollection":
      return convertFeatureCollection(geojson);
    default:
      return convertGeometryToWK(geojson);
  }
}
function parseFromWK(item, asFeature = false, properties = {}) {
  const parsed = (0, import_wellknown.parse)(item);
  if (asFeature) {
    return {
      type: "Feature",
      geometry: parsed,
      properties
    };
  }
  return parsed;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  convertFeatureCollection,
  convertFeatureToWK,
  convertGeometryToWK,
  convertToWK,
  parseFromWK
});
